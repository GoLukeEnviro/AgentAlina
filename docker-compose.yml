version: '3.8'

services:
  autogen-mcp:
    build:
      context: ./services/autogen-mcp
    stdin_open: true
    tty: true
    networks:
      - agentalina_network
    depends_on:
      - model-mcp
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('MCP Server Health Check')"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: .
      dockerfile: docker/production/Dockerfile
    image: agentalina:latest
    container_name: agentalina_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=agentalina
      - POSTGRES_USER=agentalina_user
      - POSTGRES_PASSWORD=agentalina_password
    volumes:
      - app_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - agentalina_network

  redis:
    image: redis:6.2-alpine
    container_name: agentalina_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentalina_network

  postgres:
    image: postgres:13-alpine
    container_name: agentalina_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agentalina
      - POSTGRES_USER=agentalina_user
      - POSTGRES_PASSWORD=agentalina_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/production/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentalina_user -d agentalina"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentalina_network

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc
      - /sys:/host/sys
      - /:/rootfs
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - agentalina_network

  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: agentalina_prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    extra_hosts:
      - "monitor:127.0.0.1"
    networks:
      - agentalina_network

  ollama:
    image: ollama/ollama:0.1.34
    ports:
      - 11435:11434
    deploy:
      resources:
        limits:
          cpus: '2.00'
          memory: 8G
    networks:
      - agentalina_network
  grafana:
    image: grafana/grafana:8.2.2
    container_name: agentalina_grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentalina_network

  nginx:
    image: nginx:1.21-alpine
    container_name: agentalina_nginx
    restart: unless-stopped
    volumes:
      - ./docker/production/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentalina_network

  model-mcp:
    build:
      context: ./services/model-mcp
    stdin_open: true
    tty: true
    networks:
      - agentalina_network
    depends_on:
      - ollama
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('MCP Server Health Check')"]
      interval: 30s
      timeout: 10s
      retries: 3

  monitor-mcp:
    build:
      context: ./services/monitor-mcp
    stdin_open: true
    tty: true
    networks:
      - agentalina_network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('MCP Server Health Check')"]
      interval: 30s
      timeout: 10s
      retries: 3

  optimizer-mcp:
    build:
      context: ./services/optimizer-mcp
    stdin_open: true
    tty: true
    networks:
      - agentalina_network
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('MCP Server Health Check')"]
      interval: 30s
      timeout: 10s
      retries: 3

  plugin-mcp:
    build:
      context: ./services/plugin-mcp
    stdin_open: true
    tty: true
    networks:
      - agentalina_network
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('MCP Server Health Check')"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  app_data:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  agentalina_network:
    driver: bridge
